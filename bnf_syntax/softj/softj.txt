<S> ::= <EL>
<EL> ::= <E> *
<E> ::= <right> ";" | <left> "=" <right> ";" | <ifexpr> | <while> | <function>

<left> ::= <value_definition> | <value_name>
<right> ::= <comparison_equal> | <function_message_passing>

<comparison_equal> ::= <comparison_equal> "==" <comparison> | <comparison>
<comparison> ::= <comparison> "<" <expr> | <comparison> "<=" <expr> | <comparison> ">" <expr> | <comparison> ">=" <expr> | <expr>

<expr> ::= <expr> "+" <term> | <expr> "-" <term> | <term>
<term> ::= <term> "*" <factor> | <term> "/" <factor> | <factor>
<factor> ::= <number> | "(" <right> ")" | <value_name> | <text>

<number> ::= NUM
<value_definition> ::= <type_name> <value_name>

<type_name> ::= "int" | "string" | "void"
<value_name> ::= TEXT

<text> ::= """ TEXT """ | "'" TEXT "'" | """ NUM """ | "'" NUM "'" | """ """ | "'" "'"

<ifexpr> ::= <if>

<if> ::= "if" <right> <block>
<while> ::= "while" <right> <block>
<function> ::= <value_definition> "(" <argument> ")" <block>
<function_message_passing> ::= <value_name> "(" <value_enumeration> ")"
<argument> ::= <value_definition> "," <argument>  | <value_definition> |
<value_enumeration> ::= <right> "," <value_enumeration>  | <right> |

<block> ::= "{" <EL> "}"
